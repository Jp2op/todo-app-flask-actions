name: CI/CD Pipeline with EKS Provisioning

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: jayyp2op/flask-todo-app:latest # Ensure this image tag is used in your k8s/deployment.yaml

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }} # Check if your Terraform uses this directly
          BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
        run: |
          # Ensure your Terraform code (main.tf/providers.tf) has the helm provider
          # correctly configured to connect to EKS, as per the previous explanation.
          terraform apply -auto-approve \
            -var="datadog_api_key=$DATADOG_API_KEY" \
            -var="bugsnag_api_key=$BUGSNAG_API_KEY" # Add other vars if needed by TF

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest' # Consider pinning to a specific version

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name todo-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Helm # This step is still useful if you have other Helm charts deployed via CLI
        uses: azure/setup-helm@v3
        with:
          version: 'latest' # Consider pinning to a specific version
      
      - name: Create or update Bugsnag secret
        run: |
          kubectl create secret generic bugsnag-secret \
          --from-literal=BUGSNAG_API_KEY=${{ secrets.BUGSNAG_API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS (Application Manifests)
        run: |
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml

      - name: Check Deployment status
        run: kubectl get deployment flask-todo-app -o wide
    
      - name: List pods
        run: kubectl get pods -o wide

      - name: Describe Deployment
        run: kubectl describe deployment flask-todo-app
  
      - name: Show pod logs if exists
        run: |
          POD=$(kubectl get pods -l app=flask-todo-app -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD || echo "No logs available"

      # - name: Install Datadog via Helm # COMMENTED OUT / REMOVE IF DATADOG IS MANAGED BY TERRAFORM HELM_RELEASE
      #   run: |
      #     helm repo add datadog https://helm.datadoghq.com
      #     helm repo update
      #     helm upgrade --install datadog datadog/datadog \
      #       --set datadog.apiKey=${{ secrets.DATADOG_API_KEY }} \
      #       --set datadog.site='datadoghq.com' \
      #       --set datadog.logs.enabled=true \
      #       --set datadog.apm.enabled=true \
      #       --set datadog.processAgent.enabled=true \
      #       --set agents.containerLogs.enabled=true \
      #       --set datadog.env=production \
      #       --set targetSystem=linux \
      #       --namespace datadog \
      #       --create-namespace

      - name: Inject Environment Variables into flask-todo-app Deployment
        run: |
          kubectl set env deployment/flask-todo-app \
            DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }} \
            BUGSNAG_API_KEY=${{ secrets.BUGSNAG_API_KEY }}
      
      - name: Wait for LoadBalancer external IP
        run: |
          echo "Waiting for external IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc flask-todo-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [[ -n "$EXTERNAL_IP" ]]; then
              echo "âœ… External IP: $EXTERNAL_IP"
              echo "Visit: http://$EXTERNAL_IP"
              break
            fi
            echo "Still waiting... ($i/30)"
            sleep 10
          done